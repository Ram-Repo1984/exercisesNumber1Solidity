// SPDX-License-Identifier: GPL-3.0
pragma solidity >=0.7.0 <0.9.0;

contract TaskContract {
    //la sintaxis para armar una funcion.
    //int n = 30;
    //function myNumber () public view returns(int){
        //return n; //}

        uint nextId;
        struct Task{  // struct es una lista que tolera mÃ¡s de un tipo de dato.
            uint id;
            string name;
            string descripcion;          
        }

        Task [] tasks;

        function createTask (string memory _name, string memory _descripcion) public {          
            tasks.push(Task(nextId,_name,_descripcion)); // la funcion push, agrega elementos a la lista
            nextId++;
        }

        function findIndex (uint _id) internal view returns (uint) {
           for (uint i = 0; i < tasks.length; i++){
                if (tasks[i].id == _id){
                    return i;
                }
           }
           revert ('Task not found');
        }

        function readTask (uint _id) public view returns(uint, string memory, string memory) {
            uint index = findIndex(_id);
            return (tasks[index].id, tasks[index].name, tasks[index].descripcion);       
            }

        function upDateTask (uint _id, string memory _name, string memory _descripcion) public {
            uint index = findIndex(_id);
            tasks[index].name = _name;
            tasks[index].descripcion = _descripcion;
        }

        function deleteTask (uint _id) public{
            uint index = findIndex(_id);
            delete tasks [index];
        }
    
}